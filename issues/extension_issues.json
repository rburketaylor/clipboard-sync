[
  {
    "title": "M1: Initialize Vite + Vue 3 + TypeScript for MV3",
    "labels": ["area:extension","type:task","M1","priority:normal"],
    "body": "Scaffold Chrome extension project with Vite + Vue 3 + TypeScript. Add @crxjs/vite-plugin (or equivalent) for MV3 bundling.\n\nAcceptance:\n- Vite project builds a dist/ with popup + background worker files\n- TypeScript + @types/chrome configured\n- Repo paths: chrome-extension/, chrome-extension/vite.config.ts\n\nRefs: design-doc.md §4.1; .kiro/specs/clipboard-sync/tasks.md (M1)"
  },
  {
    "title": "M1: Create directory layout and manifest boilerplate",
    "labels": ["area:extension","type:task","M1"],
    "body": "Add structure: public/manifest.json, public/icons/{16,32,48,128}.png; src/{background,content,popup,options,shared}. Provide placeholder files.\n\nAcceptance:\n- Valid MV3 manifest with minimal permissions (storage, scripting)\n- dist/ produces expected file tree\n\nRefs: design-doc.md §4.1; tasks.md M1.2"
  },
  {
    "title": "M1: Tooling (ESLint, Prettier, Vitest/Jest, sinon-chrome)",
    "labels": ["area:extension","type:task","M1"],
    "body": "Configure ESLint + Prettier, add test runner (Vitest preferred) and @vue/test-utils, sinon-chrome.\n\nAcceptance:\n- lint and test scripts pass (npm run lint, npm test)\n\nRefs: tasks.md M1.3"
  },
  {
    "title": "M1: Package scripts (dev, build, test, e2e, zip)",
    "labels": ["area:extension","type:task","M1"],
    "body": "Add npm scripts in chrome-extension/package.json: dev, build, test, e2e, zip.\n\nAcceptance:\n- dev: vite build --watch (or CRX plugin dev)\n- zip: produces clipboard-sync-extension.zip\n\nRefs: tasks.md M1.4"
  },
  {
    "title": "M1: Document extension dev workflow in README",
    "labels": ["area:extension","type:task","M1"],
    "body": "Update top-level README with steps to build and load unpacked extension.\n\nAcceptance:\n- README includes chrome://extensions steps and commands\n\nRefs: tasks.md M1.5"
  },
  {
    "title": "M2: Implement selection capture (content/selection.ts)",
    "labels": ["area:extension","type:task","M2"],
    "body": "Implement on-demand selection capture using window.getSelection(), injected via chrome.scripting.executeScript when popup opens.\n\nAcceptance:\n- Returns selected text reliably across sites\n- Debounced or one-shot to avoid spam\n\nRefs: tasks.md M2.1; requirements.md R1"
  },
  {
    "title": "M2: Capture tab URL/title (content/tabMeta.ts)",
    "labels": ["area:extension","type:task","M2"],
    "body": "Provide function to read location.href and document.title via injected script.\n\nAcceptance:\n- Popup shows current tab URL and title\n\nRefs: tasks.md M2.2; requirements.md R2"
  },
  {
    "title": "M2: Popup UI (Vue) with Send Text/URL actions",
    "labels": ["area:extension","type:task","M2"],
    "body": "Build Popup.vue to display selection, URL/title, and send buttons with loading and error states.\n\nAcceptance:\n- UX shows selection when available, otherwise guidance\n- Buttons trigger background sendClip message\n\nRefs: tasks.md M2.3"
  },
  {
    "title": "M2: Wire popup→background messaging",
    "labels": ["area:extension","type:task","M2"],
    "body": "Use chrome.runtime.sendMessage to route popupOpened and sendClip to background worker.\n\nAcceptance:\n- Messages observed in background console\n\nRefs: tasks.md M2.4"
  },
  {
    "title": "M2: Unit tests for selection capture and popup",
    "labels": ["area:extension","type:task","M2"],
    "body": "Add tests covering selection capture logic and popup component interactions.\n\nAcceptance:\n- Tests pass in CI\n\nRefs: tasks.md M2.5"
  },
  {
    "title": "M3: Background router (service worker) with capture flow",
    "labels": ["area:extension","type:task","M3"],
    "body": "Implement src/background/index.ts to handle popupOpened and sendClip; execute content scripts on active tab.\n\nAcceptance:\n- Background collects selection + tab meta on popup open\n\nRefs: tasks.md M3.1"
  },
  {
    "title": "M3: Runtime config via chrome.storage (mode/endpoints)",
    "labels": ["area:extension","type:task","M3"],
    "body": "Persist {mode, wsUrl, backendBaseUrl, debug} in chrome.storage.local with getters/setters.\n\nAcceptance:\n- Options changes persist and read correctly\n\nRefs: tasks.md M3.2"
  },
  {
    "title": "M3: Transport — Native messaging client",
    "labels": ["area:extension","type:task","M3"],
    "body": "Implement connectNative('com.clipboardsync.host') with lazy connection, retries, and per-send timeout.\n\nAcceptance:\n- Fails gracefully when host not installed\n\nRefs: tasks.md M3.3"
  },
  {
    "title": "M3: Transport — Reconnectable WebSocket client",
    "labels": ["area:extension","type:task","M3"],
    "body": "Implement WS client to ws://127.0.0.1:17373 with exponential backoff and idempotency token.\n\nAcceptance:\n- Auto-reconnect within 3s; ack handling\n\nRefs: tasks.md M3.3"
  },
  {
    "title": "M3: Transport — HTTP fallback to FastAPI backend",
    "labels": ["area:extension","type:task","M3"],
    "body": "POST /clip with validated payload; optional GET /clips?limit=5. Ensure CORS/dev config documented.\n\nAcceptance:\n- Successful round-trip to backend in dev\n\nRefs: tasks.md M3.3"
  },
  {
    "title": "M3: Options page with Test Connection",
    "labels": ["area:extension","type:task","M3"],
    "body": "Build Options.vue to choose transport and configure URLs; include Test Connection button.\n\nAcceptance:\n- Test Connection indicates success/failure per transport\n\nRefs: tasks.md M3.4"
  },
  {
    "title": "M3: Integration tests for routing and transports",
    "labels": ["area:extension","type:task","M3"],
    "body": "Mock chrome APIs and transport layers; verify sendClip routing, retry, and error flows.\n\nAcceptance:\n- Integration tests pass in CI\n\nRefs: tasks.md M3.5"
  },
  {
    "title": "M4: Validation helpers and limits",
    "labels": ["area:extension","type:task","M4"],
    "body": "Implement validators.ts: content ≤10KB, title ≤500, type in {text,url}, URL format check.\n\nAcceptance:\n- Invalid payloads blocked client-side with friendly errors\n\nRefs: tasks.md M4.1; backend/models.py constraints"
  },
  {
    "title": "M4: Error handling and user feedback in popup",
    "labels": ["area:extension","type:task","M4"],
    "body": "Add toasts/status for timeouts, retries, and failures; clear copy for permission issues.\n\nAcceptance:\n- User can recover or understand next steps\n\nRefs: tasks.md M4.2; requirements.md R7"
  },
  {
    "title": "M4: Accessibility and UI polish",
    "labels": ["area:extension","type:task","M4"],
    "body": "Keyboard navigation, ARIA roles, reduced-motion.\n\nAcceptance:\n- Axe DevTools audit shows no critical issues\n\nRefs: tasks.md M4.3"
  },
  {
    "title": "M4: Unit tests for validators and error flows",
    "labels": ["area:extension","type:task","M4"],
    "body": "Test validators and popup error UX.\n\nAcceptance:\n- Coverage increased; tests pass in CI\n\nRefs: tasks.md M4.4"
  },
  {
    "title": "M5: Unit+integration coverage ≥ 85%",
    "labels": ["area:extension","type:task","M5"],
    "body": "Add/expand tests to reach ≥85% coverage for extension code.\n\nAcceptance:\n- Coverage report ≥85% in CI\n\nRefs: tasks.md M5.1"
  },
  {
    "title": "M5: E2E with Playwright/Puppeteer + web-ext",
    "labels": ["area:extension","type:task","M5"],
    "body": "Load built extension; simulate selection→send flow against mock WS/native.\n\nAcceptance:\n- Happy-path e2e passes locally and in CI\n\nRefs: tasks.md M5.2"
  },
  {
    "title": "M5: CI job for extension (build + tests + artifact)",
    "labels": ["area:extension","type:task","M5"],
    "body": "Add CI to run npm ci, tests, build, and upload dist/ artifact.\n\nAcceptance:\n- CI passes on PRs\n\nRefs: tasks.md M5.3"
  },
  {
    "title": "M6: Production build optimization and sourcemaps",
    "labels": ["area:extension","type:task","M6"],
    "body": "Optimize bundle (tree-shake, minify) and generate sourcemaps.\n\nAcceptance:\n- Bundle sizes reasonable; sourcemaps exist\n\nRefs: tasks.md M6.1"
  },
  {
    "title": "M6: CSP connect-src for backend/WS",
    "labels": ["area:extension","type:task","M6"],
    "body": "Ensure MV3 CSP allows http://localhost:8000 and ws://127.0.0.1:17373 in dev.\n\nAcceptance:\n- No CSP violations during sends\n\nRefs: tasks.md M6.2"
  },
  {
    "title": "M6: Icons, assets, and store-ready ZIP",
    "labels": ["area:extension","type:task","M6"],
    "body": "Provide required icon sizes and zip the dist/ for upload.\n\nAcceptance:\n- ZIP passes Chrome Web Store checks\n\nRefs: tasks.md M6.3"
  },
  {
    "title": "M6: Privacy policy stub (no tracking)",
    "labels": ["area:extension","type:task","M6"],
    "body": "Draft privacy note: no tracking; local communications only; endpoints user-configurable.\n\nAcceptance:\n- Text ready for store listing\n\nRefs: tasks.md M6.4"
  }
]

